https://kubernetes.io/docs/concepts/services-networking/network-policies/#the-networkpolicy-resource
kubectl exec k8s-mysql -it -- bash
kubectl expose pod k8s-nginx --port=80 --name=k8s-srv-nginx --type=NodePort

------------------------------
------------------------------
kubectl apply -f - <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  password: YWRtaW4=
EOF
------------------------------------
------------------------------------
kubectl apply -f - <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: k8s-mysql
  labels:
    name: lbl-k8s-mysql
spec:
  containers:
  - name: mysql
    image: mysql:latest
    env:
    - name: MYSQL_ROOT_PASSWORD
      valueFrom:
        secretKeyRef:
          name: mysql-pass
          key: password
    ports:
    - name: mysql
      containerPort: 3306
      protocol: TCP
    volumeMounts:
    - name: k8s-mysql-storage
      mountPath: /var/lib/mysql
  volumes:
  - name: k8s-mysql-storage
    emptyDir: {}
EOF
-----------------------------------
-----------------------------------
kubectl apply -f - <<EOF
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  labels:
    name: lbl-k8s-mysql
spec:
  ports:
  - port: 3306
  selector:
    name: lbl-k8s-mysql
  type: ClusterIP
EOF
--------------------------------
--------------------------------

kubectl apply -f - <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: k8s-nginx
  labels:
    name: lbl-k8s-nginx
spec:
  containers:
  - name: nginx
    image: nginx
    ports:
    - name: nginx
      containerPort: 80
      protocol: TCP
EOF
---------------------------------
---------------------------------
kubectl apply -f - <<EOF
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: allow-nginx1-nginx1
spec:
  podSelector:
    matchLabels:
      service: k8s-nginx1
  ingress:
  - from:
    - podSelector:
        matchLabels:
          service: k8s-nginx0
    ports:
    - protocol: TCP
      port: 80
EOF
--------------------------------
------------------------------
kubectl apply -f - <<EOF
apiVersion: v1
kind: Service
metadata:
  name: k8s-nginx1-srv
  labels:
    name: k8s-nginx1-srv-lbl
spec:
  ports:
  - port: 3306
  selector:
    name: k8s-nginx1-srv-lbl
  type: ClusterIP
EOF
---------------------------------
---------------------------------
Рабочее - запрет всего для lbl-k8s-nginx:
kubectl apply -f - <<EOF
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: web-deny-all
  namespace: default
spec:
  podSelector:
      matchLabels: 
          name: lbl-k8s-nginx

EOF
--------------------------------
--------------------------------
Рабочее - разрешение DNS:
kubectl apply -f - <<EOF
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default.dns
  namespace: default
spec:
  podSelector: {}
  egress:
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: UDP
      port: 53
  policyTypes:
  - Egress
EOF
--------------------------------
--------------------------------
Рабочее - разрешить ингресс и егресс для lbl-k8s-nginx:
kubectl apply -f - <<EOF
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all-ingress-egress
spec:
  podSelector:
    matchLabels: 
       name: lbl-k8s-nginx
  ingress:
  - {}
  policyTypes:
  - Ingress
  egress:
  - {}
  policyTypes:
  - Egress
EOF
-----------------------------------
-----------------------------------
kubectl apply -f - <<EOF
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: dany-all-ingress-egress
spec:
  podSelector:
    matchLabels: 
       name: lbl-k8s-nginx
  policyTypes:
  - Ingress
  - Egress
EOF
--------------------------------------